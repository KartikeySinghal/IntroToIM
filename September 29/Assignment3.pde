int squareSize = 20;    //regulates the square size
int numSquare = 10;    //regulates the number of squares generated per cycle
float perlinStart = 0;  //regulates the start value for generating perlin noise

generateSquare[] mySquare = new generateSquare[numSquare];  //declares the array full of squares using the generateSquare class

void setup() {
  size(500, 500);
  frameRate(10);
  background(0);
}

class generateSquare {  //class for generating sqaures at the desired location

  float x, y, size;

  generateSquare(float xCoord, float yCoord, float sqSize) {
    x = xCoord;       // x coordinate of the square
    y = yCoord;      // y coordinate of the square
    size = sqSize;  // size of the square
  }

  void drawSquare() {  // function that actually draws the square

    square(x, y, size);
  }
}

void draw() {

  float x = noise(perlinStart);          //initializes the x variable with the starter value of perlin noise
  x = map(x, 0, 1, 0, width);           //maps the values generated by the noise function to the entire width of the canvas
  perlinStart = perlinStart+0.05;      //increment value for the perlinStart variable

  for (int i = 0; i<mySquare.length; i++) {
    mySquare[i] = new generateSquare(x, random(0, height-10), squareSize);  // for loop to fill the array with squares made via the generateSquare function
  }

  for (int i = 0; i<mySquare.length; i++) {


    //uses the same start value as above to generate a colour scheme for the squares
    float r = noise(perlinStart);
    float g = noise(perlinStart);
    float b = noise(perlinStart);
    r = map(r, 0, 1, 0, 255);
    g = map(g, 0, 1, x, 255);
    b = map(b, 0, 1, x, 255);
    fill(r, g, b);

    mySquare[i].drawSquare(); //calls the draw sqaure function for each element of the mySquare array
  }
}
