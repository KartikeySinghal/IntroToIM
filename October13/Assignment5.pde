PImage img;
float perlinStart = 0; //regulates the start value for generating perlin noise

void setup() {
  size(1900,1266);
  img = loadImage("Hills.jpg");  //loads the image
  background(0);
}

void draw() {

  float z = noise(perlinStart);       //initializes the z variable with the starter value of perlin noise   
  z = map(z, 0, 1, 0, img.width);    //maps the values generated by the noise function to the entire width of the image    
  perlinStart = perlinStart+0.05;   //increment value for the perlinStart variable

  int randInt = int(random(0, 1));   //random number to regulate the choosing of shape between a circle and sqaure
  
  for (int i = 0; i<1000; i++ ) {   // for loop for regulating the number of shapes drawn each frame
    float x = random(img.width);    //chooses a random value for x and y from the image height and width
    float y = random(img.height);
    //float x = mouseX;
    //float y = mouseY;
    //int pixLoc = int(x+y*name.width);
    //color c = name.pixels[pixLoc];
    color c1 = img.get(int(x), int(y));        //c1 is the colour obtained from the pixel at x,y as generated above
    color c2 = img.get(int(x+z), int(y+z));   //c2 is the colour obtained by adding the value of z generated using perlin noise to the pixel at x,y as generated above
    color c3 = lerpColor(c1, c2, 0.5);       //c3 is the colour obtained by calculating a color between c1 and c2 at a specific increment of 0.5
    fill(c3);                               //fills the below shapes using c3 as color. I used c3 since c1 enables me to have a basic overlay of the image and c2 provides that "throbbing effect"
    
    if (randInt == 0) {                    //the if-elif here switches between a circle and square to imitate pixels of the orginal image
      circle(x, y, 5);
      randInt = 1;
    } else if (randInt == 1) {
      square(x, y, 5);
      randInt = 0;
    }
  }
}
